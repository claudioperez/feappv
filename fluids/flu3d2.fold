!$Id:$
      subroutine flu3d2(d,ul,xl,tl,s,r,ndf,ndm,nst,isw, ther)

!      * * F E A P * * A Finite Element Analysis Program

!....  Copyright (c) 1984-2019: Regents of the University of California
!                               All rights reserved

!-----[--.----+----.----+----.-----------------------------------------]
!     Modification log                                Date (dd/mm/year)
!       Original version                                    02/04/2018
!-----[--.----+----.----+----.-----------------------------------------]
!     Purpose: Three-dimensional u-p Navier-Stokes fluid  element

!     N.B.:  Not coded for fluids

!      Inputs:
!         d(*)  - Element parameters
!         ul(ndf,*) - Current nodal solution parameters
!         xl(ndm,*) - Nodal coordinates
!         tl(*)     - Nodal temp vector
!         ndf       - Degree of freedoms/node
!         ndm       - Mesh coordinate dimension
!         nst       - Element array dimension
!         isw       - Solution option switch

!      Outputs:
!         s(nst,*)  - Element array
!         r(ndf,*)  - Element vector
!-----[--.----+----.----+----.-----------------------------------------]
      implicit  none

      include  'augdat.h'
      include  'bdata.h'
      include  'cdata.h'
      include  'elcoor.h'
      include  'eldata.h'
      include  'elengy.h'
      include  'elplot.h'
      include  'eltran.h'
      include  'fdata.h'
      include  'hdata.h'
      include  'iofile.h'
      include  'oelmt.h'
      include  'pconstant.h'
      include  'pmod2d.h'
      include  'ptdat6.h'
      include  'p_int.h'
      include  'qudshp.h'
      include  'rdata.h'
      include  'comblk.h'

      logical   ther
      integer   ndf,ndm,nst,isw,i,j,jj,l
      integer   nhv,istrt,nn, tdof
      real*8    alam,ha, d1
      real*8    dsigtr, mpress, dvs, cfac,lfac, fac
      real*8    d(*)     ,  ul(ndf,nen,*),  xl(ndm,*), tl(*), s(nst,*)
      real*8    r(ndf,*) ,  xx(3,125)    ,  vtheta(4,125)
      real*8    bbd(3,7) ,  aa(6,6,2,125),  dd(7,7)
      real*8    sigm(9)  ,  x0(3)        ,  th(125)  , shpbar(3,125,125)
      real*8    hh(10,10)
      real*8    pbar(125),  hsig(10)     ,  eps(9,3) ,  epsv(125)
      real*8    dther(7) ,  body(3)      ,  rr(10)   ,  bt(3)
      real*8    one3
      parameter(one3=1.0d0/3.0d0)

      save

!     Data inputs
      if( isw.eq.1 ) then

        if(nen.le.10) then
          nh1 = nh1 + 2
        elseif(nen.le.27) then
          nh1 = nh1 + 8
        else
          nh1 = nh1 + 20
        endif

!     Augmented Lagrangian update for nested iteration
      elseif(isw.eq.10) then

        call quadr3d(d,.true.)

        d1    = augf*d(185)
        fp(1) = nh2 - 1
        fp(2) = fp(1) + npm
        do i = 1,npm
          hr(fp(1)+i) = hr(fp(1)+i) + d1*hr(fp(2)+i)
        end do ! i

!     Compute tangent stiffness and residual force vector
      elseif(isw.eq. 3 .or. isw.eq. 4 .or. isw.eq. 6 .or.
     &       isw.eq. 8 .or. isw.eq.14 .or.
     &       isw.eq.22 .or. isw.eq.25) then

!       Integration order set to static
        if(ctan(3).ne.0.0) then
          cfac = d(7)
          lfac = 1.d0 - cfac
        else
          cfac = 0.0d0
          lfac = 0.0d0
        endif

!       Proportional body forces
        call sbodyf(d, body)
        estore = 0.0d0

!       Set element quadrature order
        call quadr3d(d,.true.)

!       Set number of history terms / quadradure point
        nhv    = nint(d(15))
        istrt  = nint(d(84))

!       Center estimate
        if(npm.gt.1) then
          do i = 1,2
            x0(i) = 0.0d0
            do j = 1,nvn
              x0(i) = x0(i) + xl(i,j)
            end do ! j
            x0(i) = x0(i)/dble(nvn)
          end do ! i
        endif

!       MECHANICAL ELEMENT
        do l = 1,lint

!         Shape functions and derivatives
          call interp3d(l, xl, ndm,nel)

!         Mixed volume effect and temperature projection
          vtheta(:,l) = 0.0d0
          th(l)       = -d(9)

!         Compute coordinates and temperature
          xx(1:3,l) = 0.0d0
          do i = 1,nel
            xx(1:3,l) = xx(1:3,l) + shp3(4,i,l)*xl(1:3,i)
            th(l)     = th(l)     + shp3(4,i,l)*tl(i)
          end do ! i

!         Compute volumetric strain from displacements
          do i = 1,nel
            vtheta(1,l) = vtheta(1,l) + shp3(1,i,l) * ul(1,i,1)
     &                                + shp3(2,i,l) * ul(2,i,1)
     &                                + shp3(3,i,l) * ul(3,i,1)
            vtheta(2,l) = vtheta(2,l) + shp3(1,i,l) * ul(1,i,2)
     &                                + shp3(2,i,l) * ul(2,i,2)
     &                                + shp3(3,i,l) * ul(3,i,2)
            vtheta(3,l) = vtheta(3,l) + shp3(1,i,l) * ul(1,i,3)
     &                                + shp3(2,i,l) * ul(2,i,3)
     &                                + shp3(3,i,l) * ul(3,i,3)
          end do ! i

!         Set the pressure functions
          phi(1,l) = 1.d0
          if(npm.gt.1) then
            phi(2:4,l) = xx(1:3,l) - x0(1:3)
            if(npm.gt.4) then
              phi( 5,l) = phi(2,l)**2
              phi( 6,l) = phi(2,l)*phi(3,l)
              phi( 7,l) = phi(3,l)**2
              phi( 8,l) = phi(3,l)*phi(4,l)
              phi( 9,l) = phi(4,l)**2
              phi(10,l) = phi(4,l)*phi(2,l)
            endif
          endif
        end do ! l

!       Mixed model for volumetric and temperature response
        call bbar3s(phi,shp3,jac,lint,nel,npm,hh,vtheta,shpbar)

!       Initialize storage for augmented function
        if(npm.gt.1) then
          do i = 1,npm
            rr(i) = 0.0d0
          end do ! i
        endif

!       Compute strains and stresses at quadrature points
        nn = 2*npm
        do l = 1,lint
          call strn3m(shp3(1,1,l),xl,ul,vtheta(1,l),
     &                ndm,ndf,nel,nen,eps)

          epsv(l) = vtheta(1,l)

!         Set augmented multipler
          alam = hr(nh2)
          do i = 1,npm-1
            alam = alam + phi(i+1,l)*hr(nh2+i)
          end do ! i

          call modlfl(l,d,th(l),eps,epsv(l),
     &                hr(nn+nh1),hr(nn+nh2),nhv,
     &                istrt,aa(1,1,1,l),sigp(1,l),alam,ha,isw)

          if(npm.gt.1) then
            do i = 1,npm
              rr(i) = rr(i) + phi(i,l)*ha*jac(l)
            end do ! i
          endif

!         Volumetric stress
          pbar(l) = one3*(sigp(1,l) + sigp(2,l) + sigp(3,l))

          nn = nn + nhv
        end do ! l

!       Integrate constant pressure over volume
        if(npm.eq.1) then

          hr(nh2+1) = ha
          mpress    = 0.0d0
          do l = 1,lint
            mpress  = mpress  + pbar(l)*jac(l)
          end do ! l

!         Divide pressure by volume
          press(1) = mpress * hh(1,1)
          do l = 2,lint
            press(l) = press(1)
          end do ! l

!       Higher order element pressures
        else

          fp(1) = nh2 + npm  - 1
          do i = 1,npm
            hr(fp(1)+i) = 0.0d0
            do j = 1,npm
              hr(fp(1)+i) = hr(fp(1)+i) + hh(i,j)*rr(j)
            end do ! j
          end do ! i

          do i = 1,npm
            sigm(i) = 0.0d0
          end do ! i
          do l = 1,lint
            mpress  = pbar(l)*jac(l)
            sigm(1) = sigm(1) + mpress
            do i = 2,npm
              sigm(i) = sigm(i) + mpress*phi(i,l)
            end do ! i
          end do ! l

!         Divide pressure by reference volume
          do i = 1,npm
            hsig(i) = 0.0d0
            do j = 1,npm
              hsig(i) = hsig(i) + hh(i,j)*sigm(j)
            end do ! j
          end do ! i

          do l = 1,lint
            press(l) = hsig(1)
            do i = 2,npm
              press(l) = press(l) + hsig(i)*phi(i,l)
            end do ! i
          end do ! l

        endif

!       Compute mixed stress
        do l = 1,lint
          dsigtr    =  press(l)  - pbar(l)
          sigp(1,l) =  sigp(1,l) + dsigtr
          sigp(2,l) =  sigp(2,l) + dsigtr
          sigp(3,l) =  sigp(3,l) + dsigtr
        end do ! l

!       Tangent and residual computations
        if(isw.eq.3 .or. isw.eq.6 .or. isw.eq.14) then

!         Compute mixed pressure
          if(isw.eq.3 .or. isw.eq.6) then

            do l = 1,lint

!             Store time history plot data for element
              i = 6*(l-1)
              do j = 1,6
                tt(j+i) = sigp(j,l)
                sigm(j) = sigp(j,l)*jac(l)
              end do ! j

!             Compute residual
              do j = 1,nel

                dvs    = shp3(4,j,l)*jac(l)
                r(1,j) = r(1,j) + body(1)*dvs
     &                          - shp3(1,j,l)*sigm(1)
     &                          - shp3(2,j,l)*sigm(4)
     &                          - shp3(3,j,l)*sigm(6)
                r(2,j) = r(2,j) + body(2)*dvs
     &                          - shp3(1,j,l)*sigm(4)
     &                          - shp3(2,j,l)*sigm(2)
     &                          - shp3(3,j,l)*sigm(5)
                r(3,j) = r(3,j) + body(3)*dvs
     &                          - shp3(1,j,l)*sigm(6)
     &                          - shp3(2,j,l)*sigm(5)
     &                          - shp3(3,j,l)*sigm(3)
              end do ! j

!             Compute mixed tangent stiffness matrix
              if(isw.eq.3) then

!               Multiply tangent moduli by volume element
                call dmatmx( aa(1,1,1,l), dd )
                d1 = jac(l)*ctan(1)
                do i = 1,7
                  do j = 1,7
                    dd(i,j) = dd(i,j)*d1
                  end do ! j
!                 Thermo-mechanical coupling
                  dther(i) = aa(i,1,2,l)*d1
                end do ! i
                tdof = nint(d(19))

!               Compute row terms
                do i = 1,nel

!                 Compute bmat-t * dd * dvol
                  do jj = 1,7

                    bbd(1,jj) = shp3(1,i,l)*dd(1,jj)
     &                        + shp3(2,i,l)*dd(4,jj)
     &                        + shp3(3,i,l)*dd(6,jj)
     &                        + shpbar(1,i,l)*dd(7,jj)

                    bbd(2,jj) = shp3(2,i,l)*dd(2,jj)
     &                        + shp3(1,i,l)*dd(4,jj)
     &                        + shp3(3,i,l)*dd(5,jj)
     &                        + shpbar(2,i,l)*dd(7,jj)

                    bbd(3,jj) = shp3(3,i,l)*dd(3,jj)
     &                        + shp3(2,i,l)*dd(5,jj)
     &                        + shp3(1,i,l)*dd(6,jj)
     &                        + shpbar(3,i,l)*dd(7,jj)
                  end do ! jj
!                          _
!                 Compute: B_trans * D * alpha * j * w
                  if(ther) then
                    fac = (dther(1) + dther(2) + dther(3))*one3
                    bt(1) =  shp3(1,i,l)*dther(1) + shp3(2,i,l)*dther(4)
     &                    +  shp3(3,i,l)*dther(6)
     &                    + (shpbar(1,i,l) - shp3(1,i,l))*fac

                    bt(2) =  shp3(2,i,l)*dther(2) + shp3(1,i,l)*dther(4)
     &                    +  shp3(3,i,l)*dther(5)
     &                    + (shpbar(2,i,l) - shp3(2,i,l))*fac

                    bt(3) =  shp3(3,i,l)*dther(3) + shp3(2,i,l)*dther(5)
     &                    +  shp3(1,i,l)*dther(6)
     &                    + (shpbar(3,i,l) - shp3(3,i,l))*fac
                  endif

!                 Compute tangent stiffness
                  do j = 1,nel

!                   Compute mechanics part of tangent stiffness
                    do jj = 1,3
                      s(sa(i)+jj,sa(j)+1) = s(sa(i)+jj,sa(j)+1)
     &                              + bbd(jj,1)*shp3(1,j,l)
     &                              + bbd(jj,4)*shp3(2,j,l)
     &                              + bbd(jj,6)*shp3(3,j,l)
     &                              + bbd(jj,7)*shpbar(1,j,l)

                      s(sa(i)+jj,sa(j)+2) = s(sa(i)+jj,sa(j)+2)
     &                              + bbd(jj,2)*shp3(2,j,l)
     &                              + bbd(jj,4)*shp3(1,j,l)
     &                              + bbd(jj,5)*shp3(3,j,l)
     &                              + bbd(jj,7)*shpbar(2,j,l)

                      s(sa(i)+jj,sa(j)+3) = s(sa(i)+jj,sa(j)+3)
     &                              + bbd(jj,3)*shp3(3,j,l)
     &                              + bbd(jj,5)*shp3(2,j,l)
     &                              + bbd(jj,6)*shp3(1,j,l)
     &                              + bbd(jj,7)*shpbar(3,j,l)
                    end do ! jj

!                   Thermo-mechanical coupling matrix
                    if(ther) then
                      do jj = 1,3
                      s(sa(i)+jj,sa(j)+tdof)  = s(sa(i)+jj,sa(j)+tdof)
     &                                  + bt(jj)*shp3(4,j,l)
                      end do ! jj
                    endif

                  end do ! j
                end do ! i
              endif ! isw = 3
            end do ! l

!           Inertial contributions to residual and tangent
            if(ctan(3).ne.0.0) then
              call iner3d(d,xl,ul(1,1,4),ul(1,1,5),s,r,
     &                    nel,ndf,ndm,nst, isw)
            endif

          endif ! isw = 3 or 6

!       Output stresses.
        elseif(isw.eq.4 .or. isw.eq.8) then

!         Output stresses
          if (isw .eq. 4) then

            do l = 1,lint

!             Compute principal stress and output
              sigm(1:6) = sigp(1:6,l)
              call pstr3d(sigm,sigm(7))

              mct = mct - 5
              if(mct.le.0) then
                write(iow,2001) o,head
                if(ior.lt.0) write(*,2001) o,head
                mct = 50
              endif
              write(iow,2002) n_el,ma,xx(1:3,l),sigm(1:9)
              if(ior.lt.0) then
                write(*,2002) n_el,ma,xx(1:3,l),sigm(1:9)
              endif
            end do ! l

!         Save strains for projections
          else
            do l = 1,lint
              epsp(1:6,l) = 0.0d0
            end do ! l
          endif

!         Project stress to nodes
          if(isw.eq.8) then

            call slcn3d(sigp,epsp, r,s, nel)

          endif ! isw = 4, 8

        endif ! isw = Output

      endif ! isw = 3 or 4 or 6 or 8 or 14

!     Formats

2001  format(a1,20a4//5x,'Element Stresses'//'     Elmt Mat',
     &   '    1-Coord    2-Coord    3-Coord'/13x,
     &   '  11-Stress  22-Stress  33-Stress  12-Stress',
     &   '  23-Stress  31-Stress'/13x,
     &   '   1-Stress   2-Stress   3-Stress')

2002  format(/i9,i4,1p,3e11.3/(13x,1p,6e11.3))

      end subroutine flu3d2
